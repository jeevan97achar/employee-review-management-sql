------------------------------ CREATE CODE ------------------------------

# CREATE SCRIPTS
CREATE DATABASE EMPLOYEE_REVIEW;

USE EMPLOYEE_REVIEW;

CREATE TABLE DEPARTMENTS (
    DEPT_ID INTEGER NOT NULL AUTO_INCREMENT,
    DEPT_NAME VARCHAR(30) NOT NULL,

    PRIMARY KEY (DEPT_ID)
);

CREATE TABLE DESIGNATIONS (
    DESG_ID INTEGER NOT NULL AUTO_INCREMENT,
    DESG_NAME VARCHAR(30) NOT NULL,

    PRIMARY KEY (DESG_ID)
);

CREATE TABLE EMPLOYEES (
    EMP_ID INTEGER NOT NULL AUTO_INCREMENT,
    FIRST_NAME VARCHAR(30) NOT NULL ,
    MIDDLE_INITIAL VARCHAR(1) ,
    LAST_NAME VARCHAR(30) NOT NULL ,
    EMP_DEPT_ID INTEGER NOT NULL ,
    EMP_DESG_ID INTEGER NOT NULL ,
    EMP_RATING DECIMAL(3,2) DEFAULT 5.00,

    PRIMARY KEY (EMP_ID),
    FOREIGN KEY (EMP_DEPT_ID) REFERENCES DEPARTMENTS(DEPT_ID),
    FOREIGN KEY (EMP_DESG_ID) REFERENCES DESIGNATIONS(DESG_ID)
);

CREATE TABLE TASKS (
    TASK_ID INTEGER NOT NULL AUTO_INCREMENT,
    TASK_DETAIL VARCHAR(50) NOT NULL ,
    TASK_EMP_ID INTEGER NOT NULL ,
    TASK_STATUS TINYINT NOT NULL DEFAULT 0,
    TASK_OVERALL_RATING DECIMAL(3,2) DEFAULT 0.00,

    PRIMARY KEY (TASK_ID),
    FOREIGN KEY (TASK_EMP_ID) REFERENCES EMPLOYEES(EMP_ID)
);

CREATE TABLE RATINGS (
    RATINGS_ID INTEGER NOT NULL AUTO_INCREMENT,
    RATE_TASK_ID INTEGER NOT NULL ,
    RATE_EVALUATOR_ID INTEGER NOT NULL ,
    ACCURACY_SCORE INTEGER NOT NULL ,
    TIME_SCORE INTEGER NOT NULL ,
    EFFICIENCY_SCORE INTEGER NOT NULL ,
    REMARKS VARCHAR(50),
    DATETIME_OF_RATING TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    PRIMARY KEY (RATINGS_ID),
    FOREIGN KEY (RATE_TASK_ID) REFERENCES TASKS(TASK_ID),
    FOREIGN KEY (RATE_EVALUATOR_ID) REFERENCES EMPLOYEES(EMP_ID)
);



------------------------------ INSERT CODE ------------------------------

# INSERT SCRIPTS
INSERT INTO DEPARTMENTS (DEPT_ID, DEPT_NAME) VALUES
(1, 'Sales'),
(2, 'Marketing'),
(3, 'Human Resources'),
(4, 'Finance'),
(5, 'Product');

INSERT INTO DESIGNATIONS (DESG_ID, DESG_NAME) VALUES
(1, 'Manager'),
(2, 'Assistant Manager'),
(3, 'Associate'),
(4, 'Trainee'),
(5, 'Intern');

INSERT INTO EMPLOYEES (EMP_ID, FIRST_NAME, MIDDLE_INITIAL, LAST_NAME, EMP_DEPT_ID, EMP_DESG_ID) VALUES
(1, 'John', 'D', 'Doe', 1, 1),
(2, 'Jane', 'M', 'Smith', 1, 2),
(3, 'Robert', 'J', 'Johnson', 2, 1),
(4, 'Maria', 'G', 'Garcia', 2, 2),
(5, 'David', 'E', 'Lee', 3, 3),
(6, 'Emily', 'K', 'Kim', 3, 4),
(7, 'Michael', 'S', 'Wang', 4, 3),
(8, 'Jennifer', 'L', 'Chen', 4, 4),
(9, 'Daniel', 'D', 'Russo', 5, 5);

INSERT INTO TASKS (TASK_ID, TASK_DETAIL, TASK_EMP_ID, TASK_STATUS, TASK_OVERALL_RATING) VALUES
(1, 'Prepare sales report', 1, 1, 0.00),
(2, 'Create marketing campaign', 3, 0, 0.00),
(3, 'Conduct job interviews', 5, 1, 0.00),
(4, 'Analyze financial data', 7, 0, 0.00),
(5, 'Demo new product to clients', 9, 0, 0.00),
(6, 'Prepare keynote presentation', 3, 0, 0.00),
(7, 'Get software audit done', 9, 1, 0.00),
(8, 'Forecast sales for Q3', 5, 0, 0.00);

INSERT INTO RATINGS (RATINGS_ID, RATE_TASK_ID, RATE_EVALUATOR_ID, ACCURACY_SCORE, TIME_SCORE, EFFICIENCY_SCORE, REMARKS) VALUES
(1, 1, 1, 9, 8, 7, 'Good job!'),
(2, 3, 2, 8, 9, 9, 'Well done.'),
(3, 2, 3, 7, 8, 8, 'Keep it up.'),
(4, 4, 4, 9, 7, 6, 'Needs improvement.'),
(5, 1, 1, 9, 8, 7, 'Good job!'),
(6, 3, 2, 7, 9, 9, 'Well done.'),
(7, 8, 3, 7, 5, 8, 'Keep it up.'),
(8, 6, 4, 9, 7, 4, 'Needs improvement.'),
(9, 5, 1, 9, 8, 9, 'Good job!'),
(10, 7, 2, 8, 5, 9, 'Well done.'),
(11, 6, 3, 3, 8, 8, 'Keep it up.'),
(12, 3, 4, 9, 1, 6, 'Needs improvement.');




------------------------------ QUERY CODE ------------------------------

# WHO ARE THE TOP PERFORMERS?
SELECT
  emp.EMP_ID,
  emp.FIRST_NAME,
  emp.LAST_NAME,
  dept.DEPT_NAME,
  desg.DESG_NAME,
  IFNULL(CONCAT(MAX(eval.FIRST_NAME), ' ', MAX(eval.LAST_NAME)), 'N/A') AS EVALUATOR_NAME,
  IFNULL(ROUND(AVG((rt.ACCURACY_SCORE + rt.TIME_SCORE + rt.EFFICIENCY_SCORE)/3), 2), 'NOT YET RATED') AS AVG_RATING
FROM EMPLOYEES emp
JOIN DEPARTMENTS dept ON emp.EMP_DEPT_ID = dept.DEPT_ID
JOIN DESIGNATIONS desg ON emp.EMP_DESG_ID = desg.DESG_ID
LEFT JOIN TASKS t ON emp.EMP_ID = t.TASK_EMP_ID
LEFT JOIN RATINGS rt ON t.TASK_ID = rt.RATE_TASK_ID
LEFT JOIN EMPLOYEES eval on eval.EMP_ID = rt.RATE_EVALUATOR_ID
GROUP BY emp.EMP_ID
ORDER BY CASE WHEN AVG(rt.ACCURACY_SCORE + rt.TIME_SCORE + rt.EFFICIENCY_SCORE)
    IS NOT NULL THEN AVG(rt.ACCURACY_SCORE + rt.TIME_SCORE + rt.EFFICIENCY_SCORE) END DESC, AVG_RATING;


# DEPARTMENTS WITH AVERAGE BEST PERFORMING EMPLOYEES
SELECT
 dept.DEPT_ID,
 dept.DEPT_NAME,
 IFNULL(ROUND(AVG((rt.ACCURACY_SCORE + rt.TIME_SCORE + rt.EFFICIENCY_SCORE)/3), 2), 'NOT YET RATED') AS AVG_RATING
FROM EMPLOYEES emp
JOIN DEPARTMENTS dept ON emp.EMP_DEPT_ID = dept.DEPT_ID
LEFT JOIN TASKS t ON emp.EMP_ID = t.TASK_EMP_ID
LEFT JOIN RATINGS rt ON t.TASK_ID = rt.RATE_TASK_ID
GROUP BY dept.DEPT_ID
ORDER BY CASE WHEN AVG(rt.ACCURACY_SCORE + rt.TIME_SCORE + rt.EFFICIENCY_SCORE)
    IS NOT NULL THEN AVG(rt.ACCURACY_SCORE + rt.TIME_SCORE + rt.EFFICIENCY_SCORE) END DESC, AVG_RATING;


# QUERY TO TEST THE PROCEDURE AND TRIGGER
SELECT
    E.EMP_ID,
    CONCAT(E.FIRST_NAME, ' ', E.MIDDLE_INITIAL, '. ', E.LAST_NAME) AS EMP_NAME,
    E.EMP_RATING,
    T.TASK_OVERALL_RATING,
    (SELECT CONCAT(E.FIRST_NAME, ' ', E.LAST_NAME)
     FROM EMPLOYEE_REVIEW.EMPLOYEES E2
     WHERE E2.EMP_ID = R.RATE_EVALUATOR_ID) AS EVALUATOR,
    R.ACCURACY_SCORE, R.TIME_SCORE, R.EFFICIENCY_SCORE, R.REMARKS
FROM EMPLOYEE_REVIEW.EMPLOYEES E
LEFT JOIN EMPLOYEE_REVIEW.TASKS T on E.EMP_ID = T.TASK_EMP_ID
LEFT JOIN EMPLOYEE_REVIEW.RATINGS R ON R.RATE_TASK_ID = T.TASK_ID
WHERE E.EMP_ID = 10;
