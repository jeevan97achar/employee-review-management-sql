------------------------------ STORED PROCEDURE CODE ------------------------------

# PROCEDURE TO INSERT EMPLOYEE
create
    definer = root@localhost procedure INSERT_EMPLOYEE (
        P_FIRST_NAME VARCHAR(30),
        P_MIDDLE_INITIAL VARCHAR(1),
        P_LAST_NAME VARCHAR(30),
        P_EMP_DEPT_ID INTEGER,
        P_EMP_DESG_ID INTEGER)
begin
    INSERT INTO EMPLOYEE_REVIEW.EMPLOYEES (FIRST_NAME, MIDDLE_INITIAL, LAST_NAME, EMP_DEPT_ID, EMP_DESG_ID)
            VALUES (P_FIRST_NAME, P_MIDDLE_INITIAL, P_LAST_NAME, P_EMP_DEPT_ID, P_EMP_DESG_ID);
end;


# PROCEDURE TO INSERT TASK
create
    definer = root@localhost procedure INSERT_TASK (
        P_TASK_DETAIL VARCHAR(50),
        P_TASK_EMP_ID INTEGER)
begin
    INSERT INTO EMPLOYEE_REVIEW.TASKS (TASK_DETAIL, TASK_EMP_ID)
            VALUES (P_TASK_DETAIL, P_TASK_EMP_ID);
end;


# PROCEDURE TO INSERT RATINGS
create
    definer = root@localhost procedure INSERT_RATING (
        P_RATE_TASK_ID INTEGER,
        P_RATE_EVALUATOR_ID INTEGER,
        P_ACCURACY_SCORE INTEGER,
        P_TIME_SCORE INTEGER,
        P_EFFICIENCY_SCORE INTEGER,
        P_REMARKS VARCHAR(50))
begin
    INSERT INTO EMPLOYEE_REVIEW.RATINGS (RATE_TASK_ID, RATE_EVALUATOR_ID,
                                         ACCURACY_SCORE, TIME_SCORE, EFFICIENCY_SCORE, REMARKS)
            VALUES (P_RATE_TASK_ID, P_RATE_EVALUATOR_ID, P_ACCURACY_SCORE, P_TIME_SCORE, P_EFFICIENCY_SCORE, P_REMARKS);
end;


# CALL PROCEDURE TO INSERT EMPLOYEE
CALL INSERT_EMPLOYEE('Sarah', 'O', 'Connor', 5, 3);

# CALL PROCEDURE TO INSERT TASK
CALL INSERT_TASK('Training the interns', 10);

# CALL PROCEDURE TO INSERT RATING
CALL INSERT_RATING(9, 9, 7, 7, 7,'Nice work!');
CALL INSERT_RATING(9, 3, 9, 9, 9,'Superb!');


------------------------------ TRIGGER CODE ------------------------------

SHOW TRIGGERS;

# UPDATE TASK OVERALL RATING FROM RATING SCORES INSERT
CREATE TRIGGER UPDATE_TASK_RATING_POST_INSERT
AFTER INSERT ON EMPLOYEE_REVIEW.RATINGS FOR EACH ROW
BEGIN
    UPDATE EMPLOYEE_REVIEW.TASKS T
    SET T.TASK_OVERALL_RATING = (
        SELECT ROUND(AVG((R.ACCURACY_SCORE + R.EFFICIENCY_SCORE + R.TIME_SCORE)/3), 2)
        FROM EMPLOYEE_REVIEW.RATINGS R
        WHERE R.RATE_TASK_ID = T.TASK_ID
        GROUP BY R.RATE_TASK_ID)
    WHERE T.TASK_ID = NEW.RATE_TASK_ID;
END;


# UPDATE TASK OVERALL RATING FROM RATING SCORES UPDATE
CREATE TRIGGER UPDATE_TASK_RATING_POST_UPDATE
AFTER UPDATE ON EMPLOYEE_REVIEW.RATINGS FOR EACH ROW
BEGIN
    UPDATE EMPLOYEE_REVIEW.TASKS T
    SET T.TASK_OVERALL_RATING = (
        SELECT ROUND(AVG((R.ACCURACY_SCORE + R.EFFICIENCY_SCORE + R.TIME_SCORE)/3), 2)
        FROM EMPLOYEE_REVIEW.RATINGS R
        WHERE R.RATE_TASK_ID = T.TASK_ID
        GROUP BY R.RATE_TASK_ID)
    WHERE T.TASK_ID = NEW.RATE_TASK_ID;
END;


# UPDATE EMPLOYEE RATING FROM TASK OVERALL RATINGS
CREATE TRIGGER UPDATE_EMPLOYEE_RATING_POST_UPDATE
AFTER UPDATE ON EMPLOYEE_REVIEW.TASKS FOR EACH ROW
BEGIN
    UPDATE EMPLOYEE_REVIEW.EMPLOYEES E
    SET E.EMP_RATING = (
        SELECT ROUND(AVG(T.TASK_OVERALL_RATING), 2)
        FROM EMPLOYEE_REVIEW.TASKS T
        WHERE T.TASK_EMP_ID = E.EMP_ID
        GROUP BY T.TASK_EMP_ID)
    WHERE E.EMP_ID = NEW.TASK_EMP_ID;
END;
